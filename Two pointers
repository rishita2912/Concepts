With bruteforce approach

#include<iostream>
using namespace std;

int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i = 0;i<n;i++)
    {
        cin>>a[i];
    }
    int target;
    cin>>target;
    int f = 0;
    for(int i = 0;i<=n;i++)
    {
        for(int j = i+1;j<=n;j++)
        {
            if(a[i]+a[j] == target)
            {
                cout<<"True";
                f = 1;
                break;
            }
        }
    }
    if(f==0) cout<<"False";
}

Time Complexity for this bruteforce approach: O(N^2)

Optimising through 2 pointer technique:

#include<iostream>
#include<math.h>
#include<algorithm>
using namespace std;

int main()
{
    int n;
    cin>>n;
    int a[n];
    for(int i = 0;i<n;i++)
    {
        cin>>a[i];
    }
    int target;
    cin>>target;
    sort(a,a+n);
    int i = 0;
    int j = n-1;
    int f;
    while(i<j)
    {
        if(a[i]+a[j] == target)
        {
            f = 1;
            cout<<"True";
            break;
        }
        else if(a[i]+a[j] < target)
        {
            i++;
        }
        else
          j--;
    }
 if(f==0)
   {
    cout<<"False";
 
   }
Time Complexity for this two pointer approach: Sorting O(Nlogn)+ two pointer O(N)
